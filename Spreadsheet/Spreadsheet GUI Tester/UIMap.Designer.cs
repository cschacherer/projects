// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Spreadsheet_GUI_Tester
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Test to make sure value and content will show up after adding a double to a cell
        /// </summary>
        public void AddingDoubleContent()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UIForm1Window.UIContentTextBoxWindow.UIContentTextBoxEdit;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\DreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIForm1Window = ApplicationUnderTest.Launch(this.AddingDoubleContentParams.UIForm1WindowExePath, this.AddingDoubleContentParams.UIForm1WindowAlternateExePath);

            // Type '450' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.AddingDoubleContentParams.UIContentTextBoxEditText;

            // Type '{Enter}' in 'ContentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.AddingDoubleContentParams.UIContentTextBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// asserting that everything will show the right value in the text boxes when adding a double
        /// </summary>
        public void AssertingAddingDouble()
        {
            #region Variable Declarations
            WinEdit uINameTextBoxEdit = this.UIForm1Window.UIA1Window.UINameTextBoxEdit;
            WinEdit uIValueTextBoxEdit = this.UIForm1Window.UIValueTextBoxWindow.UIValueTextBoxEdit;
            WinEdit uIContentTextBoxEdit = this.UIForm1Window.UIContentTextBoxWindow.UIContentTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'NameTextBox' text box equals 'A1'
            Assert.AreEqual(this.AssertingAddingDoubleExpectedValues.UINameTextBoxEditText, uINameTextBoxEdit.Text, "NameTextBox for a1 incorrect ");

            // Verify that the 'Text' property of 'ValueTextBox' text box equals '450'
            Assert.AreEqual(this.AssertingAddingDoubleExpectedValues.UIValueTextBoxEditText, uIValueTextBoxEdit.Text, "ValueTextBox for a1 is incorrect ");

            // Verify that the 'Text' property of 'ContentTextBox' text box equals '450'
            Assert.AreEqual(this.AssertingAddingDoubleExpectedValues.UIContentTextBoxEditText, uIContentTextBoxEdit.Text, "ContentTextBox for a1 incorrect ");
        }
        
        /// <summary>
        /// Test to make sure adding a string will be correct
        /// </summary>
        public void AddingStringContent()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentTextBoxEdit = this.UIForm1Window.UIContentTextBoxWindow.UIContentTextBoxEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(151, 41));

            // Type 'string test' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.AddingStringContentParams.UIContentTextBoxEditText;

            // Type '{Enter}' in 'ContentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.AddingStringContentParams.UIContentTextBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Make sure all the right values will show in the text boxes
        /// </summary>
        public void AssertingAddingString()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UIForm1Window.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinEdit uIValueTextBoxEdit = this.UIForm1Window.UIValueTextBoxWindow.UIValueTextBoxEdit;
            WinEdit uINameTextBoxEdit = this.UIForm1Window.UIA1Window.UINameTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'ContentTextBox' text box equals 'string test'
            Assert.AreEqual(this.AssertingAddingStringExpectedValues.UIContentTextBoxEditText, uIContentTextBoxEdit.Text, "ContentTextBox for b1 is incorrect ");

            // Verify that the 'Text' property of 'ValueTextBox' text box equals 'string test'
            Assert.AreEqual(this.AssertingAddingStringExpectedValues.UIValueTextBoxEditText, uIValueTextBoxEdit.Text, "ValueTextBox for b1 is incorrect ");

            // Verify that the 'Text' property of 'NameTextBox' text box equals 'B1'
            Assert.AreEqual(this.AssertingAddingStringExpectedValues.UINameTextBoxEditText, uINameTextBoxEdit.Text, "NameTextBox for b1 is incorrect ");
        }
        
        /// <summary>
        /// See if adding two cells in a formula will work
        /// </summary>
        public void AddingFormulaContent1()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UIForm1Window.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\DreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIForm1Window = ApplicationUnderTest.Launch(this.AddingFormulaContent1Params.UIForm1WindowExePath, this.AddingFormulaContent1Params.UIForm1WindowAlternateExePath);

            // Type '300' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.AddingFormulaContent1Params.UIContentTextBoxEditText;

            // Type '{Enter}' in 'ContentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.AddingFormulaContent1Params.UIContentTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(163, 38));

            // Type '450' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.AddingFormulaContent1Params.UIContentTextBoxEditText1;

            // Type '{Enter}' in 'ContentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.AddingFormulaContent1Params.UIContentTextBoxEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(250, 44));

            // Type 'A1+B1' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.AddingFormulaContent1Params.UIContentTextBoxEditText2;

            // Type '{Enter}' in 'ContentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.AddingFormulaContent1Params.UIContentTextBoxEditSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// Making sure the content and value and name text boxes show the right thing
        /// </summary>
        public void AssertingAddingFormula1()
        {
            #region Variable Declarations
            WinEdit uIValueTextBoxEdit = this.UIForm1Window.UIValueTextBoxWindow.UIValueTextBoxEdit;
            WinEdit uIContentTextBoxEdit = this.UIForm1Window.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinEdit uINameTextBoxEdit = this.UIForm1Window.UIA1Window.UINameTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'ValueTextBox' text box equals '750'
            Assert.AreEqual(this.AssertingAddingFormula1ExpectedValues.UIValueTextBoxEditText, uIValueTextBoxEdit.Text, "ValueTextBox for c1 is incorrect ");

            // Verify that the 'Text' property of 'ContentTextBox' text box equals 'A1+B1'
            Assert.AreEqual(this.AssertingAddingFormula1ExpectedValues.UIContentTextBoxEditText, uIContentTextBoxEdit.Text, "ContentTextBox for c1 is incorrect ");

            // Verify that the 'Text' property of 'NameTextBox' text box equals 'C1'
            Assert.AreEqual(this.AssertingAddingFormula1ExpectedValues.UINameTextBoxEditText, uINameTextBoxEdit.Text, "NameTextBox for c1 is incorrect ");
        }
        
        /// <summary>
        /// Will click on empty cell and show nothing for value and content box but wills show the name
        /// </summary>
        public void ClickingOnEmptyCell()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(313, 44));
        }
        
        /// <summary>
        /// AssertingEmptyCell - Use 'AssertingEmptyCellExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertingEmptyCell()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UIForm1Window.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinEdit uIValueTextBoxEdit = this.UIForm1Window.UIValueTextBoxWindow.UIValueTextBoxEdit;
            WinEdit uINameTextBoxEdit = this.UIForm1Window.UIA1Window.UINameTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'ContentTextBox' text box equals ''
            Assert.AreEqual(this.AssertingEmptyCellExpectedValues.UIContentTextBoxEditText, uIContentTextBoxEdit.Text, "ContentTextBox for empty d1 is incorrect");

            // Verify that the 'Text' property of 'ValueTextBox' text box equals ''
            Assert.AreEqual(this.AssertingEmptyCellExpectedValues.UIValueTextBoxEditText, uIValueTextBoxEdit.Text, "ValueTextBox for d1 is incorrect ");

            // Verify that the 'Text' property of 'NameTextBox' text box equals 'D1'
            Assert.AreEqual(this.AssertingEmptyCellExpectedValues.UINameTextBoxEditText, uINameTextBoxEdit.Text, "NameTextBox for d1 is incorrect ");
        }
        
        /// <summary>
        /// Makes sure clicking on a cell with a formula in it will show the correct content and value
        /// </summary>
        public void ClickingOnFormulaCell()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(216, 37));
        }
        
        /// <summary>
        /// AssertingClickingFormulaCell - Use 'AssertingClickingFormulaCellExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertingClickingFormulaCell()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UIForm1Window.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinEdit uIValueTextBoxEdit = this.UIForm1Window.UIValueTextBoxWindow.UIValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'ContentTextBox' text box equals 'A1+B1'
            Assert.AreEqual(this.AssertingClickingFormulaCellExpectedValues.UIContentTextBoxEditText, uIContentTextBoxEdit.Text, "Clicking on formula cell c1 is incorrect for ContentTextBox ");

            // Verify that the 'Text' property of 'ValueTextBox' text box equals '750'
            Assert.AreEqual(this.AssertingClickingFormulaCellExpectedValues.UIValueTextBoxEditText, uIValueTextBoxEdit.Text, "Clicking on FormulaCell for c1 will be incorrect for the ValueTextBox ");
        }
        
        /// <summary>
        /// Checks to see if adding a formula to a cell will show the right output
        /// </summary>
        public void AddingFormulaContent()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UIForm1Window.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\DreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIForm1Window = ApplicationUnderTest.Launch(this.AddingFormulaContentParams.UIForm1WindowExePath, this.AddingFormulaContentParams.UIForm1WindowAlternateExePath);

            // Type '900' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.AddingFormulaContentParams.UIContentTextBoxEditText;

            // Type '{Enter}' in 'ContentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.AddingFormulaContentParams.UIContentTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(172, 32));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(154, 145));

            // Type '5.5' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.AddingFormulaContentParams.UIContentTextBoxEditText1;

            // Type '{Enter}' in 'ContentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.AddingFormulaContentParams.UIContentTextBoxEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(240, 82));

            // Type 'A1-B6' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.AddingFormulaContentParams.UIContentTextBoxEditText2;
        }
        
        /// <summary>
        /// Makes sure that creating a formula will show the correct output
        /// </summary>
        public void AssertingAddingFormula()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UIForm1Window.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinEdit uIValueTextBoxEdit = this.UIForm1Window.UIValueTextBoxWindow.UIValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'ContentTextBox' text box equals 'A1-B6'
            Assert.AreEqual(this.AssertingAddingFormulaExpectedValues.UIContentTextBoxEditText, uIContentTextBoxEdit.Text, "ContentTextBox for adding formula to c3 is incorrect ");

            // Verify that the 'Text' property of 'ValueTextBox' text box equals '894.5'
            Assert.AreEqual(this.AssertingAddingFormulaExpectedValues.UIValueTextBoxEditText, uIValueTextBoxEdit.Text, "Adding formula content to c3 is incorrect for the ValueTextBox ");
        }
        
        /// <summary>
        /// See if I hit the delete key if the formula will be removed
        /// </summary>
        public void DeletingFormulaTest()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentTextBoxEdit = this.UIForm1Window.UIContentTextBoxWindow.UIContentTextBoxEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(317, 120));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(243, 84));

            // Type '' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.DeletingFormulaTestParams.UIContentTextBoxEditText;
        }
        
        /// <summary>
        /// Makes sure the deleting a formula cell will show the correct outputs
        /// </summary>
        public void AssertingDeletingFormula()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UIForm1Window.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinEdit uIValueTextBoxEdit = this.UIForm1Window.UIValueTextBoxWindow.UIValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'ContentTextBox' text box equals ''
            Assert.AreEqual(this.AssertingDeletingFormulaExpectedValues.UIContentTextBoxEditText, uIContentTextBoxEdit.Text, "Delete didn\'t work for ContentTextBox ");

            // Verify that the 'Text' property of 'ValueTextBox' text box equals ''
            Assert.AreEqual(this.AssertingDeletingFormulaExpectedValues.UIValueTextBoxEditText, uIValueTextBoxEdit.Text, "Delete didn\'t work for ValueTestBox ");
        }
        
        /// <summary>
        /// Makes sure close will work
        /// </summary>
        public void CloseTest()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIForm1Window.UIForm1TitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(24, 11));
        }
        
        /// <summary>
        /// See if it will delete a double
        /// </summary>
        public void DeletingDoubleTest()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentTextBoxEdit = this.UIForm1Window.UIContentTextBoxWindow.UIContentTextBoxEdit;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\DreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIForm1Window = ApplicationUnderTest.Launch(this.DeletingDoubleTestParams.UIForm1WindowExePath, this.DeletingDoubleTestParams.UIForm1WindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(194, 163));

            // Type '300000030000' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.DeletingDoubleTestParams.UIContentTextBoxEditText;

            // Type '{Enter}' in 'ContentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.DeletingDoubleTestParams.UIContentTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(197, 81));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(239, 163));

            // Type '' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.DeletingDoubleTestParams.UIContentTextBoxEditText1;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(237, 115));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(239, 155));
        }
        
        /// <summary>
        /// Makes sure content and value will be empty once something has been deleted
        /// </summary>
        public void AssertingDeletingDouble()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UIForm1Window.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinEdit uIValueTextBoxEdit = this.UIForm1Window.UIValueTextBoxWindow.UIValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'ContentTextBox' text box equals ''
            Assert.AreEqual(this.AssertingDeletingDoubleExpectedValues.UIContentTextBoxEditText, uIContentTextBoxEdit.Text, "double not deleting for content ");

            // Verify that the 'Text' property of 'ValueTextBox' text box equals ''
            Assert.AreEqual(this.AssertingDeletingDoubleExpectedValues.UIValueTextBoxEditText, uIValueTextBoxEdit.Text, "value not deleted for double ");
        }
        
        /// <summary>
        /// Check and see if delete will get rid of a string
        /// </summary>
        public void DeletingStringTest()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentTextBoxEdit = this.UIForm1Window.UIContentTextBoxWindow.UIContentTextBoxEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(132, 243));

            // Type 'test' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.DeletingStringTestParams.UIContentTextBoxEditText;

            // Type '{Enter}' in 'ContentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.DeletingStringTestParams.UIContentTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(175, 187));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(381, 224));

            // Type 'dog' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.DeletingStringTestParams.UIContentTextBoxEditText1;

            // Type '{Enter}' in 'ContentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.DeletingStringTestParams.UIContentTextBoxEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(146, 247));

            // Type '' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.DeletingStringTestParams.UIContentTextBoxEditText2;
        }
        
        /// <summary>
        /// make sure delete button will delete a string
        /// </summary>
        public void AssertingDeletingString()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UIForm1Window.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinEdit uIValueTextBoxEdit = this.UIForm1Window.UIValueTextBoxWindow.UIValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'ContentTextBox' text box equals ''
            Assert.AreEqual(this.AssertingDeletingStringExpectedValues.UIContentTextBoxEditText, uIContentTextBoxEdit.Text, "delete not work on content");

            // Verify that the 'Text' property of 'ValueTextBox' text box equals ''
            Assert.AreEqual(this.AssertingDeletingStringExpectedValues.UIValueTextBoxEditText, uIValueTextBoxEdit.Text, "value not deleted for delete string ");
        }
        
        /// <summary>
        /// See if pressing enter while ContentTextBox is empty will get rid of the cell
        /// </summary>
        public void AddingEmptyContent()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentTextBoxEdit = this.UIForm1Window.UIContentTextBoxWindow.UIContentTextBoxEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(253, 179));

            // Type 'cat' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.AddingEmptyContentParams.UIContentTextBoxEditText;

            // Type '{Enter}' in 'ContentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.AddingEmptyContentParams.UIContentTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(405, 224));

            // Type '' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.AddingEmptyContentParams.UIContentTextBoxEditText1;

            // Type '{Enter}' in 'ContentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.AddingEmptyContentParams.UIContentTextBoxEditSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// See if pressing enter while content is empty will get rid of string
        /// </summary>
        public void AssertingAddingEmptyContent()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UIForm1Window.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinEdit uIValueTextBoxEdit = this.UIForm1Window.UIValueTextBoxWindow.UIValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'ContentTextBox' text box equals ''
            Assert.AreEqual(this.AssertingAddingEmptyContentExpectedValues.UIContentTextBoxEditText, uIContentTextBoxEdit.Text, "enter while content is empty did not get rid of content ");

            // Verify that the 'Text' property of 'ValueTextBox' text box equals ''
            Assert.AreEqual(this.AssertingAddingEmptyContentExpectedValues.UIValueTextBoxEditText, uIValueTextBoxEdit.Text, "enter while content is empty did not get rid of value of cell ");
        }
        
        /// <summary>
        /// testingDouble - Use 'testingDoubleParams' to pass parameters into this method.
        /// </summary>
        public void testingDouble()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UIForm1Window.UIContentTextBoxWindow.UIContentTextBoxEdit;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\DreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIForm1Window = ApplicationUnderTest.Launch(this.testingDoubleParams.UIForm1WindowExePath, this.testingDoubleParams.UIForm1WindowAlternateExePath);

            // Type '5' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.testingDoubleParams.UIContentTextBoxEditText;

            // Type '{Enter}' in 'ContentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.testingDoubleParams.UIContentTextBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// testingDoubleAssertions - Use 'testingDoubleAssertionsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void testingDoubleAssertions()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UIForm1Window.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinEdit uIValueTextBoxEdit = this.UIForm1Window.UIValueTextBoxWindow.UIValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'ContentTextBox' text box equals '5'
            Assert.AreEqual(this.testingDoubleAssertionsExpectedValues.UIContentTextBoxEditText, uIContentTextBoxEdit.Text, "Content for testingDouble is not 5");

            // Verify that the 'Text' property of 'ValueTextBox' text box equals '5'
            Assert.AreEqual(this.testingDoubleAssertionsExpectedValues.UIValueTextBoxEditText, uIValueTextBoxEdit.Text, "value for testingDoubles is not 5");
        }
        
        /// <summary>
        /// DeletingDouble - Use 'DeletingDoubleParams' to pass parameters into this method.
        /// </summary>
        public void DeletingDouble()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentTextBoxEdit = this.UIForm1Window.UIContentTextBoxWindow.UIContentTextBoxEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(94, 47));

            // Type '' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.DeletingDoubleParams.UIContentTextBoxEditText;
        }
        
        #region Properties
        public virtual AddingDoubleContentParams AddingDoubleContentParams
        {
            get
            {
                if ((this.mAddingDoubleContentParams == null))
                {
                    this.mAddingDoubleContentParams = new AddingDoubleContentParams();
                }
                return this.mAddingDoubleContentParams;
            }
        }
        
        public virtual AssertingAddingDoubleExpectedValues AssertingAddingDoubleExpectedValues
        {
            get
            {
                if ((this.mAssertingAddingDoubleExpectedValues == null))
                {
                    this.mAssertingAddingDoubleExpectedValues = new AssertingAddingDoubleExpectedValues();
                }
                return this.mAssertingAddingDoubleExpectedValues;
            }
        }
        
        public virtual AddingStringContentParams AddingStringContentParams
        {
            get
            {
                if ((this.mAddingStringContentParams == null))
                {
                    this.mAddingStringContentParams = new AddingStringContentParams();
                }
                return this.mAddingStringContentParams;
            }
        }
        
        public virtual AssertingAddingStringExpectedValues AssertingAddingStringExpectedValues
        {
            get
            {
                if ((this.mAssertingAddingStringExpectedValues == null))
                {
                    this.mAssertingAddingStringExpectedValues = new AssertingAddingStringExpectedValues();
                }
                return this.mAssertingAddingStringExpectedValues;
            }
        }
        
        public virtual AddingFormulaContent1Params AddingFormulaContent1Params
        {
            get
            {
                if ((this.mAddingFormulaContent1Params == null))
                {
                    this.mAddingFormulaContent1Params = new AddingFormulaContent1Params();
                }
                return this.mAddingFormulaContent1Params;
            }
        }
        
        public virtual AssertingAddingFormula1ExpectedValues AssertingAddingFormula1ExpectedValues
        {
            get
            {
                if ((this.mAssertingAddingFormula1ExpectedValues == null))
                {
                    this.mAssertingAddingFormula1ExpectedValues = new AssertingAddingFormula1ExpectedValues();
                }
                return this.mAssertingAddingFormula1ExpectedValues;
            }
        }
        
        public virtual AssertingEmptyCellExpectedValues AssertingEmptyCellExpectedValues
        {
            get
            {
                if ((this.mAssertingEmptyCellExpectedValues == null))
                {
                    this.mAssertingEmptyCellExpectedValues = new AssertingEmptyCellExpectedValues();
                }
                return this.mAssertingEmptyCellExpectedValues;
            }
        }
        
        public virtual AssertingClickingFormulaCellExpectedValues AssertingClickingFormulaCellExpectedValues
        {
            get
            {
                if ((this.mAssertingClickingFormulaCellExpectedValues == null))
                {
                    this.mAssertingClickingFormulaCellExpectedValues = new AssertingClickingFormulaCellExpectedValues();
                }
                return this.mAssertingClickingFormulaCellExpectedValues;
            }
        }
        
        public virtual AddingFormulaContentParams AddingFormulaContentParams
        {
            get
            {
                if ((this.mAddingFormulaContentParams == null))
                {
                    this.mAddingFormulaContentParams = new AddingFormulaContentParams();
                }
                return this.mAddingFormulaContentParams;
            }
        }
        
        public virtual AssertingAddingFormulaExpectedValues AssertingAddingFormulaExpectedValues
        {
            get
            {
                if ((this.mAssertingAddingFormulaExpectedValues == null))
                {
                    this.mAssertingAddingFormulaExpectedValues = new AssertingAddingFormulaExpectedValues();
                }
                return this.mAssertingAddingFormulaExpectedValues;
            }
        }
        
        public virtual DeletingFormulaTestParams DeletingFormulaTestParams
        {
            get
            {
                if ((this.mDeletingFormulaTestParams == null))
                {
                    this.mDeletingFormulaTestParams = new DeletingFormulaTestParams();
                }
                return this.mDeletingFormulaTestParams;
            }
        }
        
        public virtual AssertingDeletingFormulaExpectedValues AssertingDeletingFormulaExpectedValues
        {
            get
            {
                if ((this.mAssertingDeletingFormulaExpectedValues == null))
                {
                    this.mAssertingDeletingFormulaExpectedValues = new AssertingDeletingFormulaExpectedValues();
                }
                return this.mAssertingDeletingFormulaExpectedValues;
            }
        }
        
        public virtual DeletingDoubleTestParams DeletingDoubleTestParams
        {
            get
            {
                if ((this.mDeletingDoubleTestParams == null))
                {
                    this.mDeletingDoubleTestParams = new DeletingDoubleTestParams();
                }
                return this.mDeletingDoubleTestParams;
            }
        }
        
        public virtual AssertingDeletingDoubleExpectedValues AssertingDeletingDoubleExpectedValues
        {
            get
            {
                if ((this.mAssertingDeletingDoubleExpectedValues == null))
                {
                    this.mAssertingDeletingDoubleExpectedValues = new AssertingDeletingDoubleExpectedValues();
                }
                return this.mAssertingDeletingDoubleExpectedValues;
            }
        }
        
        public virtual DeletingStringTestParams DeletingStringTestParams
        {
            get
            {
                if ((this.mDeletingStringTestParams == null))
                {
                    this.mDeletingStringTestParams = new DeletingStringTestParams();
                }
                return this.mDeletingStringTestParams;
            }
        }
        
        public virtual AssertingDeletingStringExpectedValues AssertingDeletingStringExpectedValues
        {
            get
            {
                if ((this.mAssertingDeletingStringExpectedValues == null))
                {
                    this.mAssertingDeletingStringExpectedValues = new AssertingDeletingStringExpectedValues();
                }
                return this.mAssertingDeletingStringExpectedValues;
            }
        }
        
        public virtual AddingEmptyContentParams AddingEmptyContentParams
        {
            get
            {
                if ((this.mAddingEmptyContentParams == null))
                {
                    this.mAddingEmptyContentParams = new AddingEmptyContentParams();
                }
                return this.mAddingEmptyContentParams;
            }
        }
        
        public virtual AssertingAddingEmptyContentExpectedValues AssertingAddingEmptyContentExpectedValues
        {
            get
            {
                if ((this.mAssertingAddingEmptyContentExpectedValues == null))
                {
                    this.mAssertingAddingEmptyContentExpectedValues = new AssertingAddingEmptyContentExpectedValues();
                }
                return this.mAssertingAddingEmptyContentExpectedValues;
            }
        }
        
        public virtual testingDoubleParams testingDoubleParams
        {
            get
            {
                if ((this.mtestingDoubleParams == null))
                {
                    this.mtestingDoubleParams = new testingDoubleParams();
                }
                return this.mtestingDoubleParams;
            }
        }
        
        public virtual testingDoubleAssertionsExpectedValues testingDoubleAssertionsExpectedValues
        {
            get
            {
                if ((this.mtestingDoubleAssertionsExpectedValues == null))
                {
                    this.mtestingDoubleAssertionsExpectedValues = new testingDoubleAssertionsExpectedValues();
                }
                return this.mtestingDoubleAssertionsExpectedValues;
            }
        }
        
        public virtual DeletingDoubleParams DeletingDoubleParams
        {
            get
            {
                if ((this.mDeletingDoubleParams == null))
                {
                    this.mDeletingDoubleParams = new DeletingDoubleParams();
                }
                return this.mDeletingDoubleParams;
            }
        }
        
        public UIForm1Window UIForm1Window
        {
            get
            {
                if ((this.mUIForm1Window == null))
                {
                    this.mUIForm1Window = new UIForm1Window();
                }
                return this.mUIForm1Window;
            }
        }
        #endregion
        
        #region Fields
        private AddingDoubleContentParams mAddingDoubleContentParams;
        
        private AssertingAddingDoubleExpectedValues mAssertingAddingDoubleExpectedValues;
        
        private AddingStringContentParams mAddingStringContentParams;
        
        private AssertingAddingStringExpectedValues mAssertingAddingStringExpectedValues;
        
        private AddingFormulaContent1Params mAddingFormulaContent1Params;
        
        private AssertingAddingFormula1ExpectedValues mAssertingAddingFormula1ExpectedValues;
        
        private AssertingEmptyCellExpectedValues mAssertingEmptyCellExpectedValues;
        
        private AssertingClickingFormulaCellExpectedValues mAssertingClickingFormulaCellExpectedValues;
        
        private AddingFormulaContentParams mAddingFormulaContentParams;
        
        private AssertingAddingFormulaExpectedValues mAssertingAddingFormulaExpectedValues;
        
        private DeletingFormulaTestParams mDeletingFormulaTestParams;
        
        private AssertingDeletingFormulaExpectedValues mAssertingDeletingFormulaExpectedValues;
        
        private DeletingDoubleTestParams mDeletingDoubleTestParams;
        
        private AssertingDeletingDoubleExpectedValues mAssertingDeletingDoubleExpectedValues;
        
        private DeletingStringTestParams mDeletingStringTestParams;
        
        private AssertingDeletingStringExpectedValues mAssertingDeletingStringExpectedValues;
        
        private AddingEmptyContentParams mAddingEmptyContentParams;
        
        private AssertingAddingEmptyContentExpectedValues mAssertingAddingEmptyContentExpectedValues;
        
        private testingDoubleParams mtestingDoubleParams;
        
        private testingDoubleAssertionsExpectedValues mtestingDoubleAssertionsExpectedValues;
        
        private DeletingDoubleParams mDeletingDoubleParams;
        
        private UIForm1Window mUIForm1Window;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddingDoubleContent'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddingDoubleContentParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\DreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowExePath = "C:\\Users\\Conner\\Source\\Repos\\DreamTeam\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGU" +
            "I.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\DreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\DreamTeam\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI." +
            "exe";
        
        /// <summary>
        /// Type '450' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "450";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertingAddingDouble'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertingAddingDoubleExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'NameTextBox' text box equals 'A1'
        /// </summary>
        public string UINameTextBoxEditText = "A1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'ValueTextBox' text box equals '450'
        /// </summary>
        public string UIValueTextBoxEditText = "450";
        
        /// <summary>
        /// Verify that the 'Text' property of 'ContentTextBox' text box equals '450'
        /// </summary>
        public string UIContentTextBoxEditText = "450";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddingStringContent'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddingStringContentParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'string test' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "string test";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertingAddingString'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertingAddingStringExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ContentTextBox' text box equals 'string test'
        /// </summary>
        public string UIContentTextBoxEditText = "string test";
        
        /// <summary>
        /// Verify that the 'Text' property of 'ValueTextBox' text box equals 'string test'
        /// </summary>
        public string UIValueTextBoxEditText = "string test";
        
        /// <summary>
        /// Verify that the 'Text' property of 'NameTextBox' text box equals 'B1'
        /// </summary>
        public string UINameTextBoxEditText = "B1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddingFormulaContent1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddingFormulaContent1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\DreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowExePath = "C:\\Users\\Conner\\Source\\Repos\\DreamTeam\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGU" +
            "I.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\DreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\DreamTeam\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI." +
            "exe";
        
        /// <summary>
        /// Type '300' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "300";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '450' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText1 = "450";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'A1+B1' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText2 = "=A1+B1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertingAddingFormula1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertingAddingFormula1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ValueTextBox' text box equals '750'
        /// </summary>
        public string UIValueTextBoxEditText = "750";
        
        /// <summary>
        /// Verify that the 'Text' property of 'ContentTextBox' text box equals 'A1+B1'
        /// </summary>
        public string UIContentTextBoxEditText = "A1+B1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'NameTextBox' text box equals 'C1'
        /// </summary>
        public string UINameTextBoxEditText = "C1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertingEmptyCell'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertingEmptyCellExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ContentTextBox' text box equals ''
        /// </summary>
        public string UIContentTextBoxEditText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'ValueTextBox' text box equals ''
        /// </summary>
        public string UIValueTextBoxEditText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'NameTextBox' text box equals 'D1'
        /// </summary>
        public string UINameTextBoxEditText = "D1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertingClickingFormulaCell'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertingClickingFormulaCellExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ContentTextBox' text box equals 'A1+B1'
        /// </summary>
        public string UIContentTextBoxEditText = "A1+B1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'ValueTextBox' text box equals '750'
        /// </summary>
        public string UIValueTextBoxEditText = "750";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddingFormulaContent'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddingFormulaContentParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\DreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowExePath = "C:\\Users\\Conner\\Source\\Repos\\DreamTeam\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGU" +
            "I.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\DreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\DreamTeam\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI." +
            "exe";
        
        /// <summary>
        /// Type '900' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "900";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '5.5' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText1 = "5.5";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'A1-B6' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText2 = "A1-B6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertingAddingFormula'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertingAddingFormulaExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ContentTextBox' text box equals 'A1-B6'
        /// </summary>
        public string UIContentTextBoxEditText = "A1-B6";
        
        /// <summary>
        /// Verify that the 'Text' property of 'ValueTextBox' text box equals '894.5'
        /// </summary>
        public string UIValueTextBoxEditText = "894.5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DeletingFormulaTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeletingFormulaTestParams
    {
        
        #region Fields
        /// <summary>
        /// Type '' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertingDeletingFormula'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertingDeletingFormulaExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ContentTextBox' text box equals ''
        /// </summary>
        public string UIContentTextBoxEditText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'ValueTextBox' text box equals ''
        /// </summary>
        public string UIValueTextBoxEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DeletingDoubleTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeletingDoubleTestParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\DreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowExePath = "C:\\Users\\Conner\\Source\\Repos\\DreamTeam\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGU" +
            "I.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\DreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\DreamTeam\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI." +
            "exe";
        
        /// <summary>
        /// Type '300000030000' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "300000030000";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText1 = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertingDeletingDouble'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertingDeletingDoubleExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ContentTextBox' text box equals ''
        /// </summary>
        public string UIContentTextBoxEditText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'ValueTextBox' text box equals ''
        /// </summary>
        public string UIValueTextBoxEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DeletingStringTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeletingStringTestParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'test' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "test";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'dog' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText1 = "dog";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText2 = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertingDeletingString'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertingDeletingStringExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ContentTextBox' text box equals ''
        /// </summary>
        public string UIContentTextBoxEditText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'ValueTextBox' text box equals ''
        /// </summary>
        public string UIValueTextBoxEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddingEmptyContent'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AddingEmptyContentParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'cat' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "cat";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText1 = "";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertingAddingEmptyContent'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertingAddingEmptyContentExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ContentTextBox' text box equals ''
        /// </summary>
        public string UIContentTextBoxEditText = "";
        
        /// <summary>
        /// Verify that the 'Text' property of 'ValueTextBox' text box equals ''
        /// </summary>
        public string UIValueTextBoxEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'testingDouble'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class testingDoubleParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\DreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowExePath = "C:\\Users\\Conner\\Source\\Repos\\DreamTeam\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGU" +
            "I.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\DreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIForm1WindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\DreamTeam\\PS4\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI." +
            "exe";
        
        /// <summary>
        /// Type '5' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "5";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'testingDoubleAssertions'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class testingDoubleAssertionsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ContentTextBox' text box equals '5'
        /// </summary>
        public string UIContentTextBoxEditText = "5";
        
        /// <summary>
        /// Verify that the 'Text' property of 'ValueTextBox' text box equals '5'
        /// </summary>
        public string UIValueTextBoxEditText = "5";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DeletingDouble'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class DeletingDoubleParams
    {
        
        #region Fields
        /// <summary>
        /// Type '' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIForm1Window : WinWindow
    {
        
        public UIForm1Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Form1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public UIContentTextBoxWindow UIContentTextBoxWindow
        {
            get
            {
                if ((this.mUIContentTextBoxWindow == null))
                {
                    this.mUIContentTextBoxWindow = new UIContentTextBoxWindow(this);
                }
                return this.mUIContentTextBoxWindow;
            }
        }
        
        public UIA1Window UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window(this);
                }
                return this.mUIA1Window;
            }
        }
        
        public UIValueTextBoxWindow UIValueTextBoxWindow
        {
            get
            {
                if ((this.mUIValueTextBoxWindow == null))
                {
                    this.mUIValueTextBoxWindow = new UIValueTextBoxWindow(this);
                }
                return this.mUIValueTextBoxWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIForm1TitleBar UIForm1TitleBar
        {
            get
            {
                if ((this.mUIForm1TitleBar == null))
                {
                    this.mUIForm1TitleBar = new UIForm1TitleBar(this);
                }
                return this.mUIForm1TitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIContentTextBoxWindow mUIContentTextBoxWindow;
        
        private UIA1Window mUIA1Window;
        
        private UIValueTextBoxWindow mUIValueTextBoxWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIForm1TitleBar mUIForm1TitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIContentTextBoxWindow : WinWindow
    {
        
        public UIContentTextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ContentTextBox";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContentTextBoxEdit
        {
            get
            {
                if ((this.mUIContentTextBoxEdit == null))
                {
                    this.mUIContentTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContentTextBoxEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIContentTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContentTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIA1Window : WinWindow
    {
        
        public UIA1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "NameTextBox";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameTextBoxEdit
        {
            get
            {
                if ((this.mUINameTextBoxEdit == null))
                {
                    this.mUINameTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameTextBoxEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUINameTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIValueTextBoxWindow : WinWindow
    {
        
        public UIValueTextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ValueTextBox";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UIValueTextBoxEdit
        {
            get
            {
                if ((this.mUIValueTextBoxEdit == null))
                {
                    this.mUIValueTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIValueTextBoxEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUIValueTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIValueTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIForm1TitleBar : WinTitleBar
    {
        
        public UIForm1TitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
}
