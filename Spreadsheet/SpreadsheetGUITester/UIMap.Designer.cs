// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetGUITester
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Testing double
        /// </summary>
        public void TestingCellContent1()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIShortcListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem;
            WinEdit uIContentTextBoxEdit = this.UISpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            #endregion

            // Move 'SpreadsheetGUI - Shortcut' list item
            Mouse.StartDragging(uISpreadsheetGUIShortcListItem, new Point(25, 60));
            Mouse.StopDragging(uISpreadsheetGUIShortcListItem, 21, -16);

            // Launch '%USERPROFILE%\Source\Repos\UltimateDreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.TestingCellContent1Params.UISpreadsheetWindowExePath, this.TestingCellContent1Params.UISpreadsheetWindowAlternateExePath);

            // Type '55' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.TestingCellContent1Params.UIContentTextBoxEditText;

            // Type '{Enter}' in 'ContentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.TestingCellContent1Params.UIContentTextBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Making sure it works
        /// </summary>
        public void ContentBoxCheck1()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UISpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinEdit uIValueTextBoxEdit = this.UISpreadsheetWindow.UIValueTextBoxWindow.UIValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'ContentTextBox' text box equals '55'
            Assert.AreEqual(this.ContentBoxCheck1ExpectedValues.UIContentTextBoxEditText, uIContentTextBoxEdit.Text, "Content doesnt equal 55");

            // Verify that the 'Text' property of 'ValueTextBox' text box equals '55'
            Assert.AreEqual(this.ContentBoxCheck1ExpectedValues.UIValueTextBoxEditText, uIValueTextBoxEdit.Text, "Value textbox should be 55");
        }
        
        /// <summary>
        /// Esuring that invalid strings are not taken
        /// </summary>
        public void TestingInvalidFormula()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UISpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Type '55' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.TestingInvalidFormulaParams.UIContentTextBoxEditText;

            // Launch '%USERPROFILE%\Source\Repos\UltimateDreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.TestingInvalidFormulaParams.UISpreadsheetWindowExePath, this.TestingInvalidFormulaParams.UISpreadsheetWindowAlternateExePath);

            // Type '= string' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.TestingInvalidFormulaParams.UIContentTextBoxEditText1;

            // Type '{Enter}' in 'ContentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.TestingInvalidFormulaParams.UIContentTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(55, 9));
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinText uIInvalidcellnameText = this.UIInvalidcellnameWindow.UIInvalidcellnameText;
            #endregion

            // Verify that the 'DisplayText' property of 'Invalid cell name' label equals 'Invalid cell name'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIInvalidcellnameTextDisplayText, uIInvalidcellnameText.DisplayText, "Testing Invalid name");
        }
        
        /// <summary>
        /// Testing Inavlid names
        /// </summary>
        public void InvalidNameTest()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UISpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinTitleBar uIItemTitleBar = this.UIItemWindow.UIItemWindow1.UIItemTitleBar;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\UltimateDreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.InvalidNameTestParams.UISpreadsheetWindowExePath, this.InvalidNameTestParams.UISpreadsheetWindowAlternateExePath);

            // Type '= dofd' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.InvalidNameTestParams.UIContentTextBoxEditText;

            // Type '{Enter}' in 'ContentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.InvalidNameTestParams.UIContentTextBoxEditSendKeys, ModifierKeys.None);

            // Type '= sting' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.InvalidNameTestParams.UIContentTextBoxEditText1;

            // Type '{Enter}' in 'ContentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.InvalidNameTestParams.UIContentTextBoxEditSendKeys1, ModifierKeys.None);

            // Click title bar
            Mouse.Click(uIItemTitleBar, new Point(50, 21));
        }
        
        /// <summary>
        /// AssertMethod2 - Use 'AssertMethod2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WinControl uIItemDialog = this.UIItemWindow.UIItemWindow1.UIItemDialog;
            WinText uIInvalidcellnameText = this.UIInvalidcellnameWindow.UIInvalidcellnameText;
            #endregion

            // Verify that the 'ControlType' property of Dialog equals 'Dialog'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UIItemDialogControlType, uIItemDialog.ControlType.ToString(), "Check that dialog box pops up");

            // Verify that the 'DisplayText' property of 'Invalid cell name' label equals 'Invalid cell name'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UIInvalidcellnameTextDisplayText, uIInvalidcellnameText.DisplayText, "ensure that the dialog box display invalid name");
        }
        
        /// <summary>
        /// Checking that vaules are updated
        /// </summary>
        public void FormularContent()
        {
            #region Variable Declarations
            WinClient uISpreadsheetClient = this.UISpreadsheetWindow.UISpreadsheetClient;
            WinButton uICloseButton = this.UISpreadsheetWindow.UISpreadsheetTitleBar.UICloseButton;
            WinEdit uIContentTextBoxEdit = this.UISpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\UltimateDreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.FormularContentParams.UISpreadsheetWindowExePath, this.FormularContentParams.UISpreadsheetWindowAlternateExePath);

            // Click 'Spreadsheet' client
            Mouse.Click(uISpreadsheetClient, new Point(410, 39));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(33, 7));

            // Launch '%USERPROFILE%\Source\Repos\UltimateDreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow1 = ApplicationUnderTest.Launch(this.FormularContentParams.UISpreadsheetWindowExePath1, this.FormularContentParams.UISpreadsheetWindowAlternateExePath1);

            // Type '2' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.FormularContentParams.UIContentTextBoxEditText;

            // Type '{Enter}' in 'ContentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.FormularContentParams.UIContentTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(151, 32));

            // Type '4' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.FormularContentParams.UIContentTextBoxEditText1;

            // Type '{Enter}' in 'ContentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.FormularContentParams.UIContentTextBoxEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(256, 44));

            // Type 'A1+B1' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.FormularContentParams.UIContentTextBoxEditText2;
        }
        
        /// <summary>
        /// checking that the content is displayed correctly and the vaule is also correct
        /// </summary>
        public void AssertingValueContent()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UISpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinEdit uIValueTextBoxEdit = this.UISpreadsheetWindow.UIValueTextBoxWindow.UIValueTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'ContentTextBox' text box equals 'A1+B1'
            Assert.AreEqual(this.AssertingValueContentExpectedValues.UIContentTextBoxEditText, uIContentTextBoxEdit.Text, "making showing that the content shows the cell address");

            // Verify that the 'Text' property of 'ValueTextBox' text box equals '6'
            Assert.AreEqual(this.AssertingValueContentExpectedValues.UIValueTextBoxEditText, uIValueTextBoxEdit.Text, "Ensure that value evaluates correctly");
        }
        
        /// <summary>
        /// Ensuring that string displays correctly
        /// </summary>
        public void TestString()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UISpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\UltimateDreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.TestStringParams.UISpreadsheetWindowExePath, this.TestStringParams.UISpreadsheetWindowAlternateExePath);

            // Type 'dog' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.TestStringParams.UIContentTextBoxEditText;

            // Type '{Enter}' in 'ContentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.TestStringParams.UIContentTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(151, 38));

            // Type 'cat' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.TestStringParams.UIContentTextBoxEditText1;

            // Type '{Enter}' in 'ContentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.TestStringParams.UIContentTextBoxEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(73, 61));

            // Type 'dolphin' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.TestStringParams.UIContentTextBoxEditText2;

            // Type '{Enter}' in 'ContentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.TestStringParams.UIContentTextBoxEditSendKeys2, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(143, 57));

            // Type 'shark' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.TestStringParams.UIContentTextBoxEditText3;

            // Type '{Enter}' in 'ContentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.TestStringParams.UIContentTextBoxEditSendKeys3, ModifierKeys.None);
        }
        
        /// <summary>
        /// ensuring that strings displays correctly
        /// </summary>
        public void CheckingStrings()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UISpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinEdit uIValueTextBoxEdit = this.UISpreadsheetWindow.UIValueTextBoxWindow.UIValueTextBoxEdit;
            WinEdit uINameTextBoxEdit = this.UISpreadsheetWindow.UIA1Window.UINameTextBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'ContentTextBox' text box equals 'shark'
            Assert.AreEqual(this.CheckingStringsExpectedValues.UIContentTextBoxEditText, uIContentTextBoxEdit.Text, "ensure that correct string shows");

            // Verify that the 'Text' property of 'ValueTextBox' text box equals 'shark'
            Assert.AreEqual(this.CheckingStringsExpectedValues.UIValueTextBoxEditText, uIValueTextBoxEdit.Text, "shows the vaule in the cell");

            // Verify that the 'Text' property of 'NameTextBox' text box equals 'B2'
            Assert.AreEqual(this.CheckingStringsExpectedValues.UINameTextBoxEditText, uINameTextBoxEdit.Text, "shows the correct cell");
        }
        
        /// <summary>
        /// ensures that new works
        /// </summary>
        public void openingNewSpreadSheet()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\UltimateDreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.openingNewSpreadSheetParams.UISpreadsheetWindowExePath, this.openingNewSpreadSheetParams.UISpreadsheetWindowAlternateExePath);

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(33, 14));
        }
        
        /// <summary>
        /// making sure opens works correctly
        /// </summary>
        public void openingExistingSpreadsheet()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinButton uICancelButton = this.UIOpenWindow.UICancelWindow.UICancelButton;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            #endregion

            // Launch '%USERPROFILE%\Source\Repos\UltimateDreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.openingExistingSpreadsheetParams.UISpreadsheetWindowExePath, this.openingExistingSpreadsheetParams.UISpreadsheetWindowAlternateExePath);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(46, 15));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(42, 10));

            // Type 'Control + o' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.openingExistingSpreadsheetParams.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.Control);
        }
        
        /// <summary>
        /// Making sure it saves
        /// </summary>
        public void SavefileMenu()
        {
            #region Variable Declarations
            WinMenuItem uIFileMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem;
            WinEdit uIContentTextBoxEdit = this.UISpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinMenuItem uISaveMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinButton uICancelButton = this.UISaveAsWindow.UICancelWindow.UICancelButton;
            #endregion

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(15, 11));

            // Type 'dry eye' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.SavefileMenuParams.UIContentTextBoxEditText;

            // Type '{Enter}' in 'ContentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.SavefileMenuParams.UIContentTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(29, 11));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(31, 14));

            // Type 'Control + s' in 'ContentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.SavefileMenuParams.UIContentTextBoxEditSendKeys1, ModifierKeys.Control);
        }
        
        /// <summary>
        /// Checking that it closes
        /// </summary>
        public void CloseMenu()
        {
            #region Variable Declarations
            WinEdit uIContentTextBoxEdit = this.UISpreadsheetWindow.UIContentTextBoxWindow.UIContentTextBoxEdit;
            WinMenuItem uIFileMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem;
            WinMenuItem uICloseMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            WinButton uIYesButton = this.UICloseSpreadsheetWindow.UIYesWindow.UIYesButton;
            #endregion

            // Type 'opening or closing' in 'ContentTextBox' text box
            uIContentTextBoxEdit.Text = this.CloseMenuParams.UIContentTextBoxEditText;

            // Type '{Enter}' in 'ContentTextBox' text box
            Keyboard.SendKeys(uIContentTextBoxEdit, this.CloseMenuParams.UIContentTextBoxEditSendKeys, ModifierKeys.None);

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(13, 9));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(28, 17));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(53, 13));
        }
        
        #region Properties
        public virtual TestingCellContent1Params TestingCellContent1Params
        {
            get
            {
                if ((this.mTestingCellContent1Params == null))
                {
                    this.mTestingCellContent1Params = new TestingCellContent1Params();
                }
                return this.mTestingCellContent1Params;
            }
        }
        
        public virtual ContentBoxCheck1ExpectedValues ContentBoxCheck1ExpectedValues
        {
            get
            {
                if ((this.mContentBoxCheck1ExpectedValues == null))
                {
                    this.mContentBoxCheck1ExpectedValues = new ContentBoxCheck1ExpectedValues();
                }
                return this.mContentBoxCheck1ExpectedValues;
            }
        }
        
        public virtual TestingInvalidFormulaParams TestingInvalidFormulaParams
        {
            get
            {
                if ((this.mTestingInvalidFormulaParams == null))
                {
                    this.mTestingInvalidFormulaParams = new TestingInvalidFormulaParams();
                }
                return this.mTestingInvalidFormulaParams;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual InvalidNameTestParams InvalidNameTestParams
        {
            get
            {
                if ((this.mInvalidNameTestParams == null))
                {
                    this.mInvalidNameTestParams = new InvalidNameTestParams();
                }
                return this.mInvalidNameTestParams;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public virtual FormularContentParams FormularContentParams
        {
            get
            {
                if ((this.mFormularContentParams == null))
                {
                    this.mFormularContentParams = new FormularContentParams();
                }
                return this.mFormularContentParams;
            }
        }
        
        public virtual AssertingValueContentExpectedValues AssertingValueContentExpectedValues
        {
            get
            {
                if ((this.mAssertingValueContentExpectedValues == null))
                {
                    this.mAssertingValueContentExpectedValues = new AssertingValueContentExpectedValues();
                }
                return this.mAssertingValueContentExpectedValues;
            }
        }
        
        public virtual TestStringParams TestStringParams
        {
            get
            {
                if ((this.mTestStringParams == null))
                {
                    this.mTestStringParams = new TestStringParams();
                }
                return this.mTestStringParams;
            }
        }
        
        public virtual CheckingStringsExpectedValues CheckingStringsExpectedValues
        {
            get
            {
                if ((this.mCheckingStringsExpectedValues == null))
                {
                    this.mCheckingStringsExpectedValues = new CheckingStringsExpectedValues();
                }
                return this.mCheckingStringsExpectedValues;
            }
        }
        
        public virtual openingNewSpreadSheetParams openingNewSpreadSheetParams
        {
            get
            {
                if ((this.mopeningNewSpreadSheetParams == null))
                {
                    this.mopeningNewSpreadSheetParams = new openingNewSpreadSheetParams();
                }
                return this.mopeningNewSpreadSheetParams;
            }
        }
        
        public virtual openingExistingSpreadsheetParams openingExistingSpreadsheetParams
        {
            get
            {
                if ((this.mopeningExistingSpreadsheetParams == null))
                {
                    this.mopeningExistingSpreadsheetParams = new openingExistingSpreadsheetParams();
                }
                return this.mopeningExistingSpreadsheetParams;
            }
        }
        
        public virtual SavefileMenuParams SavefileMenuParams
        {
            get
            {
                if ((this.mSavefileMenuParams == null))
                {
                    this.mSavefileMenuParams = new SavefileMenuParams();
                }
                return this.mSavefileMenuParams;
            }
        }
        
        public virtual CloseMenuParams CloseMenuParams
        {
            get
            {
                if ((this.mCloseMenuParams == null))
                {
                    this.mCloseMenuParams = new CloseMenuParams();
                }
                return this.mCloseMenuParams;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        
        public UISpreadsheetWindow UISpreadsheetWindow
        {
            get
            {
                if ((this.mUISpreadsheetWindow == null))
                {
                    this.mUISpreadsheetWindow = new UISpreadsheetWindow();
                }
                return this.mUISpreadsheetWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIInvalidcellnameWindow UIInvalidcellnameWindow
        {
            get
            {
                if ((this.mUIInvalidcellnameWindow == null))
                {
                    this.mUIInvalidcellnameWindow = new UIInvalidcellnameWindow();
                }
                return this.mUIInvalidcellnameWindow;
            }
        }
        
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UICloseSpreadsheetWindow UICloseSpreadsheetWindow
        {
            get
            {
                if ((this.mUICloseSpreadsheetWindow == null))
                {
                    this.mUICloseSpreadsheetWindow = new UICloseSpreadsheetWindow();
                }
                return this.mUICloseSpreadsheetWindow;
            }
        }
        #endregion
        
        #region Fields
        private TestingCellContent1Params mTestingCellContent1Params;
        
        private ContentBoxCheck1ExpectedValues mContentBoxCheck1ExpectedValues;
        
        private TestingInvalidFormulaParams mTestingInvalidFormulaParams;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private InvalidNameTestParams mInvalidNameTestParams;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private FormularContentParams mFormularContentParams;
        
        private AssertingValueContentExpectedValues mAssertingValueContentExpectedValues;
        
        private TestStringParams mTestStringParams;
        
        private CheckingStringsExpectedValues mCheckingStringsExpectedValues;
        
        private openingNewSpreadSheetParams mopeningNewSpreadSheetParams;
        
        private openingExistingSpreadsheetParams mopeningExistingSpreadsheetParams;
        
        private SavefileMenuParams mSavefileMenuParams;
        
        private CloseMenuParams mCloseMenuParams;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        
        private UISpreadsheetWindow mUISpreadsheetWindow;
        
        private UIOKWindow mUIOKWindow;
        
        private UIInvalidcellnameWindow mUIInvalidcellnameWindow;
        
        private UIItemWindow2 mUIItemWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UICloseSpreadsheetWindow mUICloseSpreadsheetWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestingCellContent1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestingCellContent1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\UltimateDreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Conner\\Source\\Repos\\UltimateDreamTeam\\PS4\\SpreadsheetGUI\\bin\\Debug\\Sprea" +
            "dsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\UltimateDreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\UltimateDreamTeam\\PS4\\SpreadsheetGUI\\bin\\Debug\\Spreads" +
            "heetGUI.exe";
        
        /// <summary>
        /// Type '55' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "55";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ContentBoxCheck1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ContentBoxCheck1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ContentTextBox' text box equals '55'
        /// </summary>
        public string UIContentTextBoxEditText = "55";
        
        /// <summary>
        /// Verify that the 'Text' property of 'ValueTextBox' text box equals '55'
        /// </summary>
        public string UIValueTextBoxEditText = "55";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestingInvalidFormula'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestingInvalidFormulaParams
    {
        
        #region Fields
        /// <summary>
        /// Type '55' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "55";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\UltimateDreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Conner\\Source\\Repos\\UltimateDreamTeam\\PS4\\SpreadsheetGUI\\bin\\Debug\\Sprea" +
            "dsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\UltimateDreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\UltimateDreamTeam\\PS4\\SpreadsheetGUI\\bin\\Debug\\Spreads" +
            "heetGUI.exe";
        
        /// <summary>
        /// Type '= string' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText1 = "= string";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Invalid cell name' label equals 'Invalid cell name'
        /// </summary>
        public string UIInvalidcellnameTextDisplayText = "Invalid cell name";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InvalidNameTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InvalidNameTestParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\UltimateDreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Conner\\Source\\Repos\\UltimateDreamTeam\\PS4\\SpreadsheetGUI\\bin\\Debug\\Sprea" +
            "dsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\UltimateDreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\UltimateDreamTeam\\PS4\\SpreadsheetGUI\\bin\\Debug\\Spreads" +
            "heetGUI.exe";
        
        /// <summary>
        /// Type '= dofd' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "= dofd";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '= sting' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText1 = "= sting";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of Dialog equals 'Dialog'
        /// </summary>
        public string UIItemDialogControlType = "Dialog";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Invalid cell name' label equals 'Invalid cell name'
        /// </summary>
        public string UIInvalidcellnameTextDisplayText = "Invalid cell name";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FormularContent'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FormularContentParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\UltimateDreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Conner\\Source\\Repos\\UltimateDreamTeam\\PS4\\SpreadsheetGUI\\bin\\Debug\\Sprea" +
            "dsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\UltimateDreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\UltimateDreamTeam\\PS4\\SpreadsheetGUI\\bin\\Debug\\Spreads" +
            "heetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\UltimateDreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath1 = "C:\\Users\\Conner\\Source\\Repos\\UltimateDreamTeam\\PS4\\SpreadsheetGUI\\bin\\Debug\\Sprea" +
            "dsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\UltimateDreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath1 = "%USERPROFILE%\\Source\\Repos\\UltimateDreamTeam\\PS4\\SpreadsheetGUI\\bin\\Debug\\Spreads" +
            "heetGUI.exe";
        
        /// <summary>
        /// Type '2' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '4' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText1 = "4";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'A1+B1' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText2 = "A1+B1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertingValueContent'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertingValueContentExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ContentTextBox' text box equals 'A1+B1'
        /// </summary>
        public string UIContentTextBoxEditText = "A1+B1";
        
        /// <summary>
        /// Verify that the 'Text' property of 'ValueTextBox' text box equals '6'
        /// </summary>
        public string UIValueTextBoxEditText = "6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestString'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestStringParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\UltimateDreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Conner\\Source\\Repos\\UltimateDreamTeam\\PS4\\SpreadsheetGUI\\bin\\Debug\\Sprea" +
            "dsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\UltimateDreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\UltimateDreamTeam\\PS4\\SpreadsheetGUI\\bin\\Debug\\Spreads" +
            "heetGUI.exe";
        
        /// <summary>
        /// Type 'dog' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "dog";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'cat' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText1 = "cat";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'dolphin' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText2 = "dolphin";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type 'shark' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText3 = "shark";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys3 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckingStrings'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckingStringsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'ContentTextBox' text box equals 'shark'
        /// </summary>
        public string UIContentTextBoxEditText = "shark";
        
        /// <summary>
        /// Verify that the 'Text' property of 'ValueTextBox' text box equals 'shark'
        /// </summary>
        public string UIValueTextBoxEditText = "shark";
        
        /// <summary>
        /// Verify that the 'Text' property of 'NameTextBox' text box equals 'B2'
        /// </summary>
        public string UINameTextBoxEditText = "B2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'openingNewSpreadSheet'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class openingNewSpreadSheetParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\UltimateDreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Conner\\Source\\Repos\\UltimateDreamTeam\\PS4\\SpreadsheetGUI\\bin\\Debug\\Sprea" +
            "dsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\UltimateDreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\UltimateDreamTeam\\PS4\\SpreadsheetGUI\\bin\\Debug\\Spreads" +
            "heetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'openingExistingSpreadsheet'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class openingExistingSpreadsheetParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\UltimateDreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Conner\\Source\\Repos\\UltimateDreamTeam\\PS4\\SpreadsheetGUI\\bin\\Debug\\Sprea" +
            "dsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Source\Repos\UltimateDreamTeam\PS4\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%USERPROFILE%\\Source\\Repos\\UltimateDreamTeam\\PS4\\SpreadsheetGUI\\bin\\Debug\\Spreads" +
            "heetGUI.exe";
        
        /// <summary>
        /// Type 'Control + o' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "o";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SavefileMenu'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SavefileMenuParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'dry eye' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "dry eye";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'Control + s' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys1 = "s";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CloseMenu'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CloseMenuParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'opening or closing' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditText = "opening or closing";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentTextBox' text box
        /// </summary>
        public string UIContentTextBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIDesktopList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new UIDesktopList(this);
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopList mUIDesktopList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDesktopList : WinList
    {
        
        public UIDesktopList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinListItem UISpreadsheetGUIShortcListItem
        {
            get
            {
                if ((this.mUISpreadsheetGUIShortcListItem == null))
                {
                    this.mUISpreadsheetGUIShortcListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISpreadsheetGUIShortcListItem.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetGUI - Shortcut";
                    this.mUISpreadsheetGUIShortcListItem.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUISpreadsheetGUIShortcListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUISpreadsheetGUIShortcListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetWindow : WinWindow
    {
        
        public UISpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIContentTextBoxWindow UIContentTextBoxWindow
        {
            get
            {
                if ((this.mUIContentTextBoxWindow == null))
                {
                    this.mUIContentTextBoxWindow = new UIContentTextBoxWindow(this);
                }
                return this.mUIContentTextBoxWindow;
            }
        }
        
        public UIValueTextBoxWindow UIValueTextBoxWindow
        {
            get
            {
                if ((this.mUIValueTextBoxWindow == null))
                {
                    this.mUIValueTextBoxWindow = new UIValueTextBoxWindow(this);
                }
                return this.mUIValueTextBoxWindow;
            }
        }
        
        public WinClient UISpreadsheetClient
        {
            get
            {
                if ((this.mUISpreadsheetClient == null))
                {
                    this.mUISpreadsheetClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetClient.SearchProperties[WinControl.PropertyNames.Name] = "Spreadsheet";
                    this.mUISpreadsheetClient.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetClient;
            }
        }
        
        public UISpreadsheetTitleBar UISpreadsheetTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetTitleBar == null))
                {
                    this.mUISpreadsheetTitleBar = new UISpreadsheetTitleBar(this);
                }
                return this.mUISpreadsheetTitleBar;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIA1Window UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window(this);
                }
                return this.mUIA1Window;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UISpreadsheetPanel1Window UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        #endregion
        
        #region Fields
        private UIContentTextBoxWindow mUIContentTextBoxWindow;
        
        private UIValueTextBoxWindow mUIValueTextBoxWindow;
        
        private WinClient mUISpreadsheetClient;
        
        private UISpreadsheetTitleBar mUISpreadsheetTitleBar;
        
        private UIItemWindow mUIItemWindow;
        
        private UIA1Window mUIA1Window;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        
        private UISpreadsheetPanel1Window mUISpreadsheetPanel1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIContentTextBoxWindow : WinWindow
    {
        
        public UIContentTextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ContentTextBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContentTextBoxEdit
        {
            get
            {
                if ((this.mUIContentTextBoxEdit == null))
                {
                    this.mUIContentTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContentTextBoxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIContentTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContentTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIValueTextBoxWindow : WinWindow
    {
        
        public UIValueTextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ValueTextBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIValueTextBoxEdit
        {
            get
            {
                if ((this.mUIValueTextBoxEdit == null))
                {
                    this.mUIValueTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIValueTextBoxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIValueTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIValueTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetTitleBar : WinTitleBar
    {
        
        public UISpreadsheetTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIA1Window : WinWindow
    {
        
        public UIA1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "NameTextBox";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameTextBoxEdit
        {
            get
            {
                if ((this.mUINameTextBoxEdit == null))
                {
                    this.mUINameTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameTextBoxEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUINameTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File ";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUICloseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetPanel1Window : WinWindow
    {
        
        public UISpreadsheetPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIInvalidcellnameWindow : WinWindow
    {
        
        public UIInvalidcellnameWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Invalid cell name";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Static";
            this.WindowTitles.Add("Invalid cell name");
            #endregion
        }
        
        #region Properties
        public WinText UIInvalidcellnameText
        {
            get
            {
                if ((this.mUIInvalidcellnameText == null))
                {
                    this.mUIInvalidcellnameText = new WinText(this);
                    #region Search Criteria
                    this.mUIInvalidcellnameText.SearchProperties[WinText.PropertyNames.Name] = "Invalid cell name";
                    this.mUIInvalidcellnameText.WindowTitles.Add("Invalid cell name");
                    #endregion
                }
                return this.mUIInvalidcellnameText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIInvalidcellnameText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIItemTitleBar
        {
            get
            {
                if ((this.mUIItemTitleBar == null))
                {
                    this.mUIItemTitleBar = new WinTitleBar(this);
                }
                return this.mUIItemTitleBar;
            }
        }
        
        public WinControl UIItemDialog
        {
            get
            {
                if ((this.mUIItemDialog == null))
                {
                    this.mUIItemDialog = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemDialog.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
                    #endregion
                }
                return this.mUIItemDialog;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIItemTitleBar;
        
        private WinControl mUIItemDialog;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICancelWindow mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UICancelWindow1 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow1(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICancelWindow1 mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICancelWindow1 : WinWindow
    {
        
        public UICancelWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICloseSpreadsheetWindow : WinWindow
    {
        
        public UICloseSpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Close Spreadsheet";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Close Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIYesWindow mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Close Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Close Spreadsheet");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
}
